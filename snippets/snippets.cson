'.source.pascal':
  'assignment':
    'prefix': 'variable = value'
    'body': '${1:variable} = ${2:value};$3'
  'array declaration':
    'prefix': 'ARRAY[count] OF datatype'
    'body': 'ARRAY[${1:count}] OF ${2:datatype};'
  'select construct':
    'prefix': 'SELECT (variable) OF'
    'body': """
      SELECT (${1:variable}) OF
      \tCASE (${2:condition}):
      \t\t${3:consequence}
      ENDSELECT
    """
  'case construct':
    'prefix': 'CASE (condition): consequence'
    'body': """
      CASE (${1:condition}):
      \t${2:consequence}
    """
  'const':
    'prefix': 'CONST constants'
    'body': """
      CONST
      \t${1:constants}
    """
  'else':
    'prefix': 'ELSE code'
    'body': """
      ELSE
      \t${1:code}
    """
  'for to array':
    'prefix': 'FOR i = Low(array-name) TO High(array-name)'
    'body': """
      FOR ${1:i} = Low(${2:array-name}) TO High(${2:array-name}) DO
      \t$3
      ENDFOR
    """
  'for downto array':
    'prefix': 'FOR i = High(array-name) DOWNTO Low(array-name)'
    'body': """
      FOR ${1:i} = High(${2:array-name}) DOWNTO Low(${2:array-name}) DO
      \t$3
      ENDFOR
    """
  'routine definition':
    'prefix': 'ROUTINE RoutineName(parameter: parameterType): returnType'
    'body': """
      ROUTINE ${1:RoutineName}(${2:parameter}: ${3:parameterType}): ${4:returnType}
      VAR
      \t${5:variables}
      BEGIN
      \t${6:code}
      \t$RETURN (result)
      END ${1:RoutineName}
    """
  'routine declaration':
    'prefix': 'ROUTINE RoutineName: returnType'
    'body': """
      ROUTINE ${1:RoutineName}: ${2:returnType}
      VAR
      \t${5:variables}
      BEGIN
      \t${6:code}
      \t$RETURN (result)
      END ${1:RoutineName}
    """
  'routine definition':
    'prefix': 'ROUTINE RoutineName(parameter: parameterType)'
    'body': """
      ROUTINE ${1:RoutineName}(${2:parameter}: ${3:parameterType})
      VAR
      \t${5:variables}
      BEGIN
      \t${6:code}
      END ${1:RoutineName}
    """
  'getmem':
    'prefix': 'GetMem(pointer, size-of-needed-Memory);'
    'body': 'GetMem(${1:pointer}, ${2:size-of-needed-Memory});'
  'if':
    'prefix': 'IF condition THEN code ENDIF'
    'body': """
      IF ${1:condition} THEN
      \t${2:code}
      ENDIF
    """
  'if else':
    'prefix': 'IF condition THEN code ENDIF'
    'body': """
      IF ${1:condition} THEN
      \t${2:code}
      ELSE
      \t${3:code}
      ENDIF
    """
  'else':
    'prefix': 'ELSE code ENDIF'
    'body': """
      ELSE BEGIN
      \t${1:code}
      ENDIF
    """
  'program':
    'prefix': 'PROGRAM program-name VAR variables BEGIN main-code END'
    'body': """
      PROGRAM ${1:program-name}

      VAR
      \t${3:variables}
      BEGIN
      \t${2:main-code}
      END ${1:program-name}
    """
  'uses':
    'prefix': 'USES unit-names'
    'body': """
      USES
      \t${1:unit-names}
    """
  'var':
    'prefix': 'VAR variable: datatype'
    'body': """
      VAR
      \t${1:variable}: ${2:datatype};
    """
  'variable declaration':
    'prefix': 'variable: datatype'
    'body': '${1:variable}: ${2:datatype};$3'
  'while-do':
    'prefix': 'WHILE condition DO code ENDWHILE;'
    'body': """
      WHILE ${1:condition} DO
      \t${2:code}
      ENDWHILE
    """



  'true':
    'prefix': 'TRUE'
    'body': 'TRUE'
  'false':
    'prefix': 'FALSE'
    'body': 'FALSE'



  'datatype vector':
    'prefix': 'VECTOR'
    'body': 'VECTOR'
  'datatype position':
    'prefix': 'POSITION'
    'body': 'POSITION'
  'datatype config':
    'prefix': 'CONFIG'
    'body': 'CONFIG'
  'datatype integer':
    'prefix': 'INTEGER'
    'body': 'INTEGER'
  'datatype string':
    'prefix': 'STRING'
    'body': 'STRING'
  'datatype real':
    'prefix': 'REAL'
    'body': 'REAL'
  'datatype boolean':
    'prefix': 'BOOLEAN'
    'body': 'BOOLEAN'
